
  import gql from 'graphql-tag';
  export const typeDefs = gql`schema{query:Query mutation:Mutation}interface Connection{edges:[Edge]pageInfo:PageInfo}input CreateTodoInput{id:ID!title:String!}union CreateTodoMutationResult=CreateTodoSuccessResult|InvalidArgumentsResult|UnauthorizedResult type CreateTodoSuccessResult{result:Todo!}scalar DateTime interface Edge{cursor:String node:Node}type InvalidArgumentsResult{issues:[ValidationIssue!]!}type Mutation{createTodo(input:CreateTodoInput!):CreateTodoMutationResult!updateTodoTitle(input:UpdateTodoTitleInput!):UpdateTodoTitleMutationResult!}interface Node{id:ID!}type PageInfo{endCursor:String hasNextPage:Boolean!hasPreviousPage:Boolean startCursor:String}interface PagedConnection{nodes:[Node]pageInfo:PagedPageInfo}type PagedPageInfo{hasNextPage:Boolean!hasPreviousPage:Boolean totalPagesCount:Int}type Query{node(id:ID!):Node viewer:Viewer}type Todo implements Node{createdAt:DateTime!id:ID!title:String!updatedAt:DateTime!}type TodoConnection implements Connection{edges:[TodoEdge]pageInfo:PageInfo}type TodoEdge implements Edge{cursor:String node:Todo}type UnauthorizedResult{errorMessage:String!}input UpdateTodoTitleInput{id:ID!title:String!}union UpdateTodoTitleMutationResult=InvalidArgumentsResult|UnauthorizedResult|UpdateTodoTitleSuccessResult type UpdateTodoTitleSuccessResult{result:Todo!}type User{id:ID!name:String!}type ValidationIssue{field:String message:String}type Viewer{avatarImageUrl:String!createdAt:DateTime!email:String!id:ID!todos(after:String first:Int page:Int):TodoConnection!updatedAt:DateTime!}`;
