
  import gql from 'graphql-tag';
  export const typeDefs = gql`schema{query:Query mutation:Mutation}type Account implements Node{createdAt:DateTime!id:ID!name:String!updatedAt:DateTime!}type AccountConnection implements Connection{edges:[AccountEdge]pageInfo:PageInfo}type AccountEdge implements Edge{cursor:String node:Account}interface Connection{edges:[Edge]pageInfo:PageInfo}input CreateAccountInput{id:ID!name:String!}union CreateAccountMutationResult=CreateAccountSuccessResult|InvalidArgumentsResult|UnauthorizedResult type CreateAccountSuccessResult{result:Account!}scalar DateTime interface Edge{cursor:String node:Node}type InvalidArgumentsResult{issues:[ValidationIssue!]!}type Mutation{createAccount(input:CreateAccountInput!):CreateAccountMutationResult!updateAccount(input:UpdateAccountInput!):UpdateAccountMutationResult!}interface Node{id:ID!}type PageInfo{endCursor:String hasNextPage:Boolean!hasPreviousPage:Boolean startCursor:String}interface PagedConnection{nodes:[Node]pageInfo:PagedPageInfo}type PagedPageInfo{hasNextPage:Boolean!hasPreviousPage:Boolean totalPagesCount:Int}type Query{node(id:ID!):Node viewer:Viewer}type UnauthorizedResult{errorMessage:String!}input UpdateAccountInput{id:ID!name:String!}union UpdateAccountMutationResult=InvalidArgumentsResult|UnauthorizedResult|UpdateAccountSuccessResult type UpdateAccountSuccessResult{result:Account!}type User{id:ID!name:String!}type ValidationIssue{field:String message:String}type Viewer{accounts(after:String first:Int page:Int):AccountConnection!avatarImageUrl:String!createdAt:DateTime!email:String!id:ID!updatedAt:DateTime!}`;
