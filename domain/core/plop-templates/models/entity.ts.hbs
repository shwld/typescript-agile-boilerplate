import { GenericEntityProperties } from '../../shared/entity';
import { genericValidator } from '../../shared/validator';
import { {{name}}Validator } from './validator';

/** Field  */
export interface Updatable{{pascalCase name}}EntityFields {}

interface {{pascalCase name}}EntityRelationFields {}

export type {{pascalCase name}}EntityFields = GenericEntityProperties &
  StateProperties &
  Updatable{{pascalCase name}}EntityFields &
  {{pascalCase name}}EntityRelationFields;

export type AttributesForInitialize = GenericEntityProperties &
  Partial<StateProperties> &
  Updatable{{pascalCase name}}EntityFields &
  {{pascalCase name}}EntityRelationFields;

export class {{pascalCase name}}Entity implements {{pascalCase name}}EntityFields {
  readonly id;
  readonly createdAt;
  readonly updatedAt;
  readonly isDeleted;

  attributes(): AttributesForInitialize {
    return {
      id: this.id,
      createdAt: this.createdAt,
      updatedAt: this.updatedAt,

    };
  }

  constructor(args: AttributesForInitialize) {
    this.id = genericValidator.id.parse(args.id);
    this.createdAt = genericValidator.createdAt.parse(args.createdAt);
    this.updatedAt = genericValidator.updatedAt.parse(args.updatedAt);
    this.isDeleted = args.isDeleted ?? false;
    this.isUpdated = args.isUpdated ?? false;
  }

  update(fields: Updatable{{pascalCase name}}EntityFields): {{pascalCase name}}Entity {
    return new {{pascalCase name}}Entity({
      ...this.attributes(),
      ...fields,
      isUpdated: true,
    });
  }

  destroy() {
    return new {{pascalCase name}}Entity({
      ...this.attributes(),
      isDeleted: true,
    });
  }
}
