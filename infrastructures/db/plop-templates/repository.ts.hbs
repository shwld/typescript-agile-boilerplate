import { {{pascalCase name}} } from '@prisma/client';
import { {{pascalCase name}}Entity } from 'core-domain';
import type { Updatable{{pascalCase name}}EntityFields, Aggregates } from 'core-domain';
import { db } from '../lib/db';

/**
 * Mappers
 */
const mapTo{{pascalCase name}}Entity = (item: {{pascalCase name}}) =>
  new {{pascalCase name}}Entity({
    id: item.id,
    createdAt: item.createdAt,
    updatedAt: item.updatedAt,
  });
const mapTo{{pascalCase name}}EntityOrUndefined = (item: {{pascalCase name}} | null | undefined) =>
  item != null ? mapTo{{pascalCase name}}Entity(item) : undefined;

const mapFromEntity = (item: {{pascalCase name}}Entity): Updatable{{pascalCase name}}EntityFields => ({
});

/**
 * Repositories
 */
export const {{name}}Repository: Aggregates['{{name}}'] = {
  async save(item) {
    const {{name}} = await db.{{name}}.findUnique({ where: { id: item.id } });
    if ({{name}} == null) {
      return db.{{name}}
        .create({ data: { id: item.id, ...mapFromEntity(item) } })
        .then(mapTo{{pascalCase name}}Entity);
    } else if (item.isDeleted) {
      return db.{{name}}.delete({ where: { id: item.id } }).then(mapTo{{pascalCase name}}Entity);
    } else {
      return db.{{name}}
        .update({ data: mapFromEntity(item), where: { id: item.id } })
        .then(mapTo{{pascalCase name}}Entity);
    }
  },
  async findMany({ ...args }) {
    const options = {
      where: {},
    };
    const totalCount = await db.{{name}}.aggregate({
      ...options,
      _count: true,
    });
    return db.{{name}}.findMany({ ...options, ...args }).then((items) => ({
      nodes: items.map(mapTo{{pascalCase name}}Entity),
      totalCount: totalCount._count,
    }));
  },
  findBy(args) {
    return db.{{name}}
      .findFirst({
        where: { id: args.id },
      })
      .then(mapTo{{pascalCase name}}EntityOrUndefined);
  },
};
